08:34:35.474 --> request #28: textDocument/codeLens: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js"}}
08:34:35.475 <-- result #28: textDocument/codeLens: [{"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":14}},"command":{"title":"1 reference(s)","command":"gauge.showReferences","arguments":["file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js",{"line":6,"character":0},"should be able to find usages in {} second(s) for data {}"]}},{"range":{"start":{"line":23,"character":0},"end":{"line":23,"character":14}},"command":{"title":"4 reference(s)","command":"gauge.showReferences","arguments":["file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js",{"line":23,"character":0},"ensure code lens has details {}"]}}]
08:34:35.505 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20step%20definition.spec","diagnostics":[]}
08:34:35.506 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/parameters.spec","diagnostics":[]}
08:34:35.506 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/tags.spec","diagnostics":[]}
08:34:35.506 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/runLinks.spec","diagnostics":[]}
08:34:35.506 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/concept-diagnostics.spec","diagnostics":[]}
08:34:35.506 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/format.spec","diagnostics":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:35.506 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/specification%20diagnostics.spec","diagnostics":[]}
08:34:35.506 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/generateStubs/generateStubs.spec","diagnostics":[]}
08:34:35.506 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/steps.spec","diagnostics":[]}
08:34:35.506 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/findUsages.spec","diagnostics":[{"range":{"start":{"line":20,"character":0},"end":{"line":20,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":28,"character":0},"end":{"line":28,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:35.506 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/circular-references.spec","diagnostics":[]}
08:34:35.506 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/duplicate%20diagnostics.spec","diagnostics":[]}
08:34:35.506 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20concept.spec","diagnostics":[]}
08:34:36.438 --> notif: textDocument/didChange: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js","version":50},"contentChanges":[{"text":"'use strict';\r\nvar assert = require('assert');\r\n\r\nvar languageclient = require('./lsp/languageclient');\r\nvar builder = require('./lsp/util/dataBuilder');\r\n\r\nstep(\"should be able to find usages in \u003carg0\u003e second(s) for data \u003carg1\u003e\", async function(arg0, arg1) {\r\n    var details = builder.loadData(data)\r\n    var file = details[0].uri\r\n    var start = Date.now()  \r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n    finally{\r\n        var end = Date.now()\r\n        \r\n    }\r\n});\r\n\r\nstep('ensure code lens has details \u003cdata\u003e', async function (data) {\r\n    var details = builder.loadData(data)\r\n\r\n    var expectedDetails = builder.buildExpectedCodeLens(details);  \r\n    var file = details[0].uri\r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n        handleCodeLensDetails(response,expectedDetails)    \r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n});\r\n\r\nfunction handleCodeLensDetails(responseMessage,expectedDetails){\r\n    for (var rowIndex = 0; rowIndex \u003c expectedDetails.length; rowIndex++) {\r\n      var expectedDetail = expectedDetails[rowIndex]\r\n      gauge.message(\"verify code lens details\")\r\n\r\n      assert.deepEqual(responseMessage[rowIndex].range, expectedDetail.range);\r\n\r\n      assert.equal(responseMessage[rowIndex].command.title, expectedDetail.command.title)\r\n      assert.equal(responseMessage[rowIndex].command.command, expectedDetail.command.command)\r\n\r\n      // Todo refactor the way arguments are asserted\r\n      //      assert.equal(responseMessage[rowIndex].command.arguments[0], expectedDetail.command.arguments[0])\r\n      if(responseMessage[rowIndex].command.arguments[1])\r\n          assert.deepEqual(responseMessage[rowIndex].command.arguments[1], expectedDetail.command.arguments[1])\r\n      assert.equal(responseMessage[rowIndex].command.arguments[2], expectedDetail.command.arguments[2])    \r\n    }  \r\n}"}]}
08:34:36.495 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/concept-diagnostics.spec","diagnostics":[]}
08:34:36.495 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/duplicate%20diagnostics.spec","diagnostics":[]}
08:34:36.495 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/generateStubs/generateStubs.spec","diagnostics":[]}
08:34:36.495 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20step%20definition.spec","diagnostics":[]}
08:34:36.495 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/parameters.spec","diagnostics":[]}
08:34:36.495 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/tags.spec","diagnostics":[]}
08:34:36.495 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/circular-references.spec","diagnostics":[]}
08:34:36.495 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/format.spec","diagnostics":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:36.495 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/specification%20diagnostics.spec","diagnostics":[]}
08:34:36.495 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20concept.spec","diagnostics":[]}
08:34:36.495 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/steps.spec","diagnostics":[]}
08:34:36.495 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/findUsages.spec","diagnostics":[{"range":{"start":{"line":20,"character":0},"end":{"line":20,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":28,"character":0},"end":{"line":28,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:36.495 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/runLinks.spec","diagnostics":[]}
08:34:37.831 --> notif: textDocument/didChange: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js","version":54},"contentChanges":[{"text":"'use strict';\r\nvar assert = require('assert');\r\n\r\nvar languageclient = require('./lsp/languageclient');\r\nvar builder = require('./lsp/util/dataBuilder');\r\n\r\nstep(\"should be able to find usages in \u003carg0\u003e second(s) for data \u003carg1\u003e\", async function(arg0, arg1) {\r\n    var details = builder.loadData(data)\r\n    var file = details[0].uri\r\n    var start = Date.now()  \r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n    finally{\r\n        var end = Date.now()\r\n        cons\r\n    }\r\n});\r\n\r\nstep('ensure code lens has details \u003cdata\u003e', async function (data) {\r\n    var details = builder.loadData(data)\r\n\r\n    var expectedDetails = builder.buildExpectedCodeLens(details);  \r\n    var file = details[0].uri\r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n        handleCodeLensDetails(response,expectedDetails)    \r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n});\r\n\r\nfunction handleCodeLensDetails(responseMessage,expectedDetails){\r\n    for (var rowIndex = 0; rowIndex \u003c expectedDetails.length; rowIndex++) {\r\n      var expectedDetail = expectedDetails[rowIndex]\r\n      gauge.message(\"verify code lens details\")\r\n\r\n      assert.deepEqual(responseMessage[rowIndex].range, expectedDetail.range);\r\n\r\n      assert.equal(responseMessage[rowIndex].command.title, expectedDetail.command.title)\r\n      assert.equal(responseMessage[rowIndex].command.command, expectedDetail.command.command)\r\n\r\n      // Todo refactor the way arguments are asserted\r\n      //      assert.equal(responseMessage[rowIndex].command.arguments[0], expectedDetail.command.arguments[0])\r\n      if(responseMessage[rowIndex].command.arguments[1])\r\n          assert.deepEqual(responseMessage[rowIndex].command.arguments[1], expectedDetail.command.arguments[1])\r\n      assert.equal(responseMessage[rowIndex].command.arguments[2], expectedDetail.command.arguments[2])    \r\n    }  \r\n}"}]}
08:34:37.880 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/generateStubs/generateStubs.spec","diagnostics":[]}
08:34:37.880 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20step%20definition.spec","diagnostics":[]}
08:34:37.880 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/steps.spec","diagnostics":[]}
08:34:37.880 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/tags.spec","diagnostics":[]}
08:34:37.880 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/findUsages.spec","diagnostics":[{"range":{"start":{"line":20,"character":0},"end":{"line":20,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":28,"character":0},"end":{"line":28,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:37.880 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/runLinks.spec","diagnostics":[]}
08:34:37.880 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/format.spec","diagnostics":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:37.880 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/specification%20diagnostics.spec","diagnostics":[]}
08:34:37.880 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20concept.spec","diagnostics":[]}
08:34:37.880 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/parameters.spec","diagnostics":[]}
08:34:37.880 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/circular-references.spec","diagnostics":[]}
08:34:37.880 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/concept-diagnostics.spec","diagnostics":[]}
08:34:37.880 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/duplicate%20diagnostics.spec","diagnostics":[]}
08:34:37.907 --> request #29: textDocument/codeLens: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js"}}
08:34:37.909 <-- result #29: textDocument/codeLens: [{"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":14}},"command":{"title":"1 reference(s)","command":"gauge.showReferences","arguments":["file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js",{"line":6,"character":0},"should be able to find usages in {} second(s) for data {}"]}},{"range":{"start":{"line":23,"character":0},"end":{"line":23,"character":14}},"command":{"title":"4 reference(s)","command":"gauge.showReferences","arguments":["file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js",{"line":23,"character":0},"ensure code lens has details {}"]}}]
08:34:38.252 --> notif: textDocument/didChange: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js","version":55},"contentChanges":[{"text":"'use strict';\r\nvar assert = require('assert');\r\n\r\nvar languageclient = require('./lsp/languageclient');\r\nvar builder = require('./lsp/util/dataBuilder');\r\n\r\nstep(\"should be able to find usages in \u003carg0\u003e second(s) for data \u003carg1\u003e\", async function(arg0, arg1) {\r\n    var details = builder.loadData(data)\r\n    var file = details[0].uri\r\n    var start = Date.now()  \r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n    finally{\r\n        var end = Date.now()\r\n        console\r\n    }\r\n});\r\n\r\nstep('ensure code lens has details \u003cdata\u003e', async function (data) {\r\n    var details = builder.loadData(data)\r\n\r\n    var expectedDetails = builder.buildExpectedCodeLens(details);  \r\n    var file = details[0].uri\r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n        handleCodeLensDetails(response,expectedDetails)    \r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n});\r\n\r\nfunction handleCodeLensDetails(responseMessage,expectedDetails){\r\n    for (var rowIndex = 0; rowIndex \u003c expectedDetails.length; rowIndex++) {\r\n      var expectedDetail = expectedDetails[rowIndex]\r\n      gauge.message(\"verify code lens details\")\r\n\r\n      assert.deepEqual(responseMessage[rowIndex].range, expectedDetail.range);\r\n\r\n      assert.equal(responseMessage[rowIndex].command.title, expectedDetail.command.title)\r\n      assert.equal(responseMessage[rowIndex].command.command, expectedDetail.command.command)\r\n\r\n      // Todo refactor the way arguments are asserted\r\n      //      assert.equal(responseMessage[rowIndex].command.arguments[0], expectedDetail.command.arguments[0])\r\n      if(responseMessage[rowIndex].command.arguments[1])\r\n          assert.deepEqual(responseMessage[rowIndex].command.arguments[1], expectedDetail.command.arguments[1])\r\n      assert.equal(responseMessage[rowIndex].command.arguments[2], expectedDetail.command.arguments[2])    \r\n    }  \r\n}"}]}
08:34:38.287 --> request #30: textDocument/codeLens: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js"}}
08:34:38.288 <-- result #30: textDocument/codeLens: [{"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":14}},"command":{"title":"1 reference(s)","command":"gauge.showReferences","arguments":["file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js",{"line":6,"character":0},"should be able to find usages in {} second(s) for data {}"]}},{"range":{"start":{"line":23,"character":0},"end":{"line":23,"character":14}},"command":{"title":"4 reference(s)","command":"gauge.showReferences","arguments":["file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js",{"line":23,"character":0},"ensure code lens has details {}"]}}]
08:34:38.308 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/parameters.spec","diagnostics":[]}
08:34:38.309 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/tags.spec","diagnostics":[]}
08:34:38.309 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/duplicate%20diagnostics.spec","diagnostics":[]}
08:34:38.309 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/specification%20diagnostics.spec","diagnostics":[]}
08:34:38.309 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20concept.spec","diagnostics":[]}
08:34:38.309 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20step%20definition.spec","diagnostics":[]}
08:34:38.309 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/steps.spec","diagnostics":[]}
08:34:38.309 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/findUsages.spec","diagnostics":[{"range":{"start":{"line":20,"character":0},"end":{"line":20,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":28,"character":0},"end":{"line":28,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:38.309 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/runLinks.spec","diagnostics":[]}
08:34:38.309 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/circular-references.spec","diagnostics":[]}
08:34:38.309 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/concept-diagnostics.spec","diagnostics":[]}
08:34:38.309 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/format.spec","diagnostics":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:38.309 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/generateStubs/generateStubs.spec","diagnostics":[]}
08:34:38.515 --> notif: textDocument/didChange: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js","version":56},"contentChanges":[{"text":"'use strict';\r\nvar assert = require('assert');\r\n\r\nvar languageclient = require('./lsp/languageclient');\r\nvar builder = require('./lsp/util/dataBuilder');\r\n\r\nstep(\"should be able to find usages in \u003carg0\u003e second(s) for data \u003carg1\u003e\", async function(arg0, arg1) {\r\n    var details = builder.loadData(data)\r\n    var file = details[0].uri\r\n    var start = Date.now()  \r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n    finally{\r\n        var end = Date.now()\r\n        console.\r\n    }\r\n});\r\n\r\nstep('ensure code lens has details \u003cdata\u003e', async function (data) {\r\n    var details = builder.loadData(data)\r\n\r\n    var expectedDetails = builder.buildExpectedCodeLens(details);  \r\n    var file = details[0].uri\r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n        handleCodeLensDetails(response,expectedDetails)    \r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n});\r\n\r\nfunction handleCodeLensDetails(responseMessage,expectedDetails){\r\n    for (var rowIndex = 0; rowIndex \u003c expectedDetails.length; rowIndex++) {\r\n      var expectedDetail = expectedDetails[rowIndex]\r\n      gauge.message(\"verify code lens details\")\r\n\r\n      assert.deepEqual(responseMessage[rowIndex].range, expectedDetail.range);\r\n\r\n      assert.equal(responseMessage[rowIndex].command.title, expectedDetail.command.title)\r\n      assert.equal(responseMessage[rowIndex].command.command, expectedDetail.command.command)\r\n\r\n      // Todo refactor the way arguments are asserted\r\n      //      assert.equal(responseMessage[rowIndex].command.arguments[0], expectedDetail.command.arguments[0])\r\n      if(responseMessage[rowIndex].command.arguments[1])\r\n          assert.deepEqual(responseMessage[rowIndex].command.arguments[1], expectedDetail.command.arguments[1])\r\n      assert.equal(responseMessage[rowIndex].command.arguments[2], expectedDetail.command.arguments[2])    \r\n    }  \r\n}"}]}
08:34:38.566 --> request #31: textDocument/codeLens: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js"}}
08:34:38.568 <-- result #31: textDocument/codeLens: [{"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":14}},"command":{"title":"1 reference(s)","command":"gauge.showReferences","arguments":["file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js",{"line":6,"character":0},"should be able to find usages in {} second(s) for data {}"]}},{"range":{"start":{"line":23,"character":0},"end":{"line":23,"character":14}},"command":{"title":"4 reference(s)","command":"gauge.showReferences","arguments":["file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js",{"line":23,"character":0},"ensure code lens has details {}"]}}]
08:34:38.576 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/parameters.spec","diagnostics":[]}
08:34:38.576 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/tags.spec","diagnostics":[]}
08:34:38.576 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/concept-diagnostics.spec","diagnostics":[]}
08:34:38.577 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/format.spec","diagnostics":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:38.577 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20concept.spec","diagnostics":[]}
08:34:38.577 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20step%20definition.spec","diagnostics":[]}
08:34:38.577 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/steps.spec","diagnostics":[]}
08:34:38.577 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/findUsages.spec","diagnostics":[{"range":{"start":{"line":20,"character":0},"end":{"line":20,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":28,"character":0},"end":{"line":28,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:38.577 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/runLinks.spec","diagnostics":[]}
08:34:38.577 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/circular-references.spec","diagnostics":[]}
08:34:38.577 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/duplicate%20diagnostics.spec","diagnostics":[]}
08:34:38.577 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/specification%20diagnostics.spec","diagnostics":[]}
08:34:38.577 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/generateStubs/generateStubs.spec","diagnostics":[]}
08:34:38.820 --> notif: textDocument/didChange: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js","version":57},"contentChanges":[{"text":"'use strict';\r\nvar assert = require('assert');\r\n\r\nvar languageclient = require('./lsp/languageclient');\r\nvar builder = require('./lsp/util/dataBuilder');\r\n\r\nstep(\"should be able to find usages in \u003carg0\u003e second(s) for data \u003carg1\u003e\", async function(arg0, arg1) {\r\n    var details = builder.loadData(data)\r\n    var file = details[0].uri\r\n    var start = Date.now()  \r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n    finally{\r\n        var end = Date.now()\r\n        console.l\r\n    }\r\n});\r\n\r\nstep('ensure code lens has details \u003cdata\u003e', async function (data) {\r\n    var details = builder.loadData(data)\r\n\r\n    var expectedDetails = builder.buildExpectedCodeLens(details);  \r\n    var file = details[0].uri\r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n        handleCodeLensDetails(response,expectedDetails)    \r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n});\r\n\r\nfunction handleCodeLensDetails(responseMessage,expectedDetails){\r\n    for (var rowIndex = 0; rowIndex \u003c expectedDetails.length; rowIndex++) {\r\n      var expectedDetail = expectedDetails[rowIndex]\r\n      gauge.message(\"verify code lens details\")\r\n\r\n      assert.deepEqual(responseMessage[rowIndex].range, expectedDetail.range);\r\n\r\n      assert.equal(responseMessage[rowIndex].command.title, expectedDetail.command.title)\r\n      assert.equal(responseMessage[rowIndex].command.command, expectedDetail.command.command)\r\n\r\n      // Todo refactor the way arguments are asserted\r\n      //      assert.equal(responseMessage[rowIndex].command.arguments[0], expectedDetail.command.arguments[0])\r\n      if(responseMessage[rowIndex].command.arguments[1])\r\n          assert.deepEqual(responseMessage[rowIndex].command.arguments[1], expectedDetail.command.arguments[1])\r\n      assert.equal(responseMessage[rowIndex].command.arguments[2], expectedDetail.command.arguments[2])    \r\n    }  \r\n}"}]}
08:34:38.887 --> request #32: textDocument/codeLens: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js"}}
08:34:38.889 <-- result #32: textDocument/codeLens: [{"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":14}},"command":{"title":"1 reference(s)","command":"gauge.showReferences","arguments":["file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js",{"line":6,"character":0},"should be able to find usages in {} second(s) for data {}"]}},{"range":{"start":{"line":23,"character":0},"end":{"line":23,"character":14}},"command":{"title":"4 reference(s)","command":"gauge.showReferences","arguments":["file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js",{"line":23,"character":0},"ensure code lens has details {}"]}}]
08:34:38.913 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/tags.spec","diagnostics":[]}
08:34:38.913 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/findUsages.spec","diagnostics":[{"range":{"start":{"line":20,"character":0},"end":{"line":20,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":28,"character":0},"end":{"line":28,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:38.913 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/circular-references.spec","diagnostics":[]}
08:34:38.913 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/format.spec","diagnostics":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:38.913 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/specification%20diagnostics.spec","diagnostics":[]}
08:34:38.913 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/generateStubs/generateStubs.spec","diagnostics":[]}
08:34:38.913 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/steps.spec","diagnostics":[]}
08:34:38.913 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/runLinks.spec","diagnostics":[]}
08:34:38.913 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/concept-diagnostics.spec","diagnostics":[]}
08:34:38.913 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/duplicate%20diagnostics.spec","diagnostics":[]}
08:34:38.913 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20concept.spec","diagnostics":[]}
08:34:38.913 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20step%20definition.spec","diagnostics":[]}
08:34:38.913 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/parameters.spec","diagnostics":[]}
08:34:39.389 --> notif: textDocument/didChange: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js","version":58},"contentChanges":[{"text":"'use strict';\r\nvar assert = require('assert');\r\n\r\nvar languageclient = require('./lsp/languageclient');\r\nvar builder = require('./lsp/util/dataBuilder');\r\n\r\nstep(\"should be able to find usages in \u003carg0\u003e second(s) for data \u003carg1\u003e\", async function(arg0, arg1) {\r\n    var details = builder.loadData(data)\r\n    var file = details[0].uri\r\n    var start = Date.now()  \r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n    finally{\r\n        var end = Date.now()\r\n        console.log\r\n    }\r\n});\r\n\r\nstep('ensure code lens has details \u003cdata\u003e', async function (data) {\r\n    var details = builder.loadData(data)\r\n\r\n    var expectedDetails = builder.buildExpectedCodeLens(details);  \r\n    var file = details[0].uri\r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n        handleCodeLensDetails(response,expectedDetails)    \r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n});\r\n\r\nfunction handleCodeLensDetails(responseMessage,expectedDetails){\r\n    for (var rowIndex = 0; rowIndex \u003c expectedDetails.length; rowIndex++) {\r\n      var expectedDetail = expectedDetails[rowIndex]\r\n      gauge.message(\"verify code lens details\")\r\n\r\n      assert.deepEqual(responseMessage[rowIndex].range, expectedDetail.range);\r\n\r\n      assert.equal(responseMessage[rowIndex].command.title, expectedDetail.command.title)\r\n      assert.equal(responseMessage[rowIndex].command.command, expectedDetail.command.command)\r\n\r\n      // Todo refactor the way arguments are asserted\r\n      //      assert.equal(responseMessage[rowIndex].command.arguments[0], expectedDetail.command.arguments[0])\r\n      if(responseMessage[rowIndex].command.arguments[1])\r\n          assert.deepEqual(responseMessage[rowIndex].command.arguments[1], expectedDetail.command.arguments[1])\r\n      assert.equal(responseMessage[rowIndex].command.arguments[2], expectedDetail.command.arguments[2])    \r\n    }  \r\n}"}]}
08:34:39.424 --> request #33: textDocument/codeLens: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js"}}
08:34:39.425 <-- result #33: textDocument/codeLens: [{"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":14}},"command":{"title":"1 reference(s)","command":"gauge.showReferences","arguments":["file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js",{"line":6,"character":0},"should be able to find usages in {} second(s) for data {}"]}},{"range":{"start":{"line":23,"character":0},"end":{"line":23,"character":14}},"command":{"title":"4 reference(s)","command":"gauge.showReferences","arguments":["file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js",{"line":23,"character":0},"ensure code lens has details {}"]}}]
08:34:39.442 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/duplicate%20diagnostics.spec","diagnostics":[]}
08:34:39.442 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/specification%20diagnostics.spec","diagnostics":[]}
08:34:39.442 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/findUsages.spec","diagnostics":[{"range":{"start":{"line":20,"character":0},"end":{"line":20,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":28,"character":0},"end":{"line":28,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:39.442 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/runLinks.spec","diagnostics":[]}
08:34:39.442 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/tags.spec","diagnostics":[]}
08:34:39.442 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/circular-references.spec","diagnostics":[]}
08:34:39.443 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/concept-diagnostics.spec","diagnostics":[]}
08:34:39.444 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/format.spec","diagnostics":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:39.444 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/generateStubs/generateStubs.spec","diagnostics":[]}
08:34:39.444 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20concept.spec","diagnostics":[]}
08:34:39.444 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/parameters.spec","diagnostics":[]}
08:34:39.444 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/steps.spec","diagnostics":[]}
08:34:39.444 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20step%20definition.spec","diagnostics":[]}
08:34:40.430 --> notif: textDocument/didChange: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js","version":59},"contentChanges":[{"text":"'use strict';\r\nvar assert = require('assert');\r\n\r\nvar languageclient = require('./lsp/languageclient');\r\nvar builder = require('./lsp/util/dataBuilder');\r\n\r\nstep(\"should be able to find usages in \u003carg0\u003e second(s) for data \u003carg1\u003e\", async function(arg0, arg1) {\r\n    var details = builder.loadData(data)\r\n    var file = details[0].uri\r\n    var start = Date.now()  \r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n    finally{\r\n        var end = Date.now()\r\n        console.log()\r\n    }\r\n});\r\n\r\nstep('ensure code lens has details \u003cdata\u003e', async function (data) {\r\n    var details = builder.loadData(data)\r\n\r\n    var expectedDetails = builder.buildExpectedCodeLens(details);  \r\n    var file = details[0].uri\r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n        handleCodeLensDetails(response,expectedDetails)    \r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n});\r\n\r\nfunction handleCodeLensDetails(responseMessage,expectedDetails){\r\n    for (var rowIndex = 0; rowIndex \u003c expectedDetails.length; rowIndex++) {\r\n      var expectedDetail = expectedDetails[rowIndex]\r\n      gauge.message(\"verify code lens details\")\r\n\r\n      assert.deepEqual(responseMessage[rowIndex].range, expectedDetail.range);\r\n\r\n      assert.equal(responseMessage[rowIndex].command.title, expectedDetail.command.title)\r\n      assert.equal(responseMessage[rowIndex].command.command, expectedDetail.command.command)\r\n\r\n      // Todo refactor the way arguments are asserted\r\n      //      assert.equal(responseMessage[rowIndex].command.arguments[0], expectedDetail.command.arguments[0])\r\n      if(responseMessage[rowIndex].command.arguments[1])\r\n          assert.deepEqual(responseMessage[rowIndex].command.arguments[1], expectedDetail.command.arguments[1])\r\n      assert.equal(responseMessage[rowIndex].command.arguments[2], expectedDetail.command.arguments[2])    \r\n    }  \r\n}"}]}
08:34:40.462 --> request #34: textDocument/codeLens: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js"}}
08:34:40.464 <-- result #34: textDocument/codeLens: [{"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":14}},"command":{"title":"1 reference(s)","command":"gauge.showReferences","arguments":["file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js",{"line":6,"character":0},"should be able to find usages in {} second(s) for data {}"]}},{"range":{"start":{"line":23,"character":0},"end":{"line":23,"character":14}},"command":{"title":"4 reference(s)","command":"gauge.showReferences","arguments":["file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js",{"line":23,"character":0},"ensure code lens has details {}"]}}]
08:34:40.498 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/circular-references.spec","diagnostics":[]}
08:34:40.498 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/duplicate%20diagnostics.spec","diagnostics":[]}
08:34:40.498 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/format.spec","diagnostics":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:40.498 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/specification%20diagnostics.spec","diagnostics":[]}
08:34:40.498 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/generateStubs/generateStubs.spec","diagnostics":[]}
08:34:40.498 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20concept.spec","diagnostics":[]}
08:34:40.498 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/runLinks.spec","diagnostics":[]}
08:34:40.498 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/steps.spec","diagnostics":[]}
08:34:40.498 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/tags.spec","diagnostics":[]}
08:34:40.498 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/findUsages.spec","diagnostics":[{"range":{"start":{"line":20,"character":0},"end":{"line":20,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":28,"character":0},"end":{"line":28,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:40.498 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/concept-diagnostics.spec","diagnostics":[]}
08:34:40.498 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20step%20definition.spec","diagnostics":[]}
08:34:40.498 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/parameters.spec","diagnostics":[]}
08:34:41.598 --> notif: textDocument/didChange: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js","version":63},"contentChanges":[{"text":"'use strict';\r\nvar assert = require('assert');\r\n\r\nvar languageclient = require('./lsp/languageclient');\r\nvar builder = require('./lsp/util/dataBuilder');\r\n\r\nstep(\"should be able to find usages in \u003carg0\u003e second(s) for data \u003carg1\u003e\", async function(arg0, arg1) {\r\n    var details = builder.loadData(data)\r\n    var file = details[0].uri\r\n    var start = Date.now()  \r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n    finally{\r\n        var end = Date.now()\r\n        console.log(star)\r\n    }\r\n});\r\n\r\nstep('ensure code lens has details \u003cdata\u003e', async function (data) {\r\n    var details = builder.loadData(data)\r\n\r\n    var expectedDetails = builder.buildExpectedCodeLens(details);  \r\n    var file = details[0].uri\r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n        handleCodeLensDetails(response,expectedDetails)    \r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n});\r\n\r\nfunction handleCodeLensDetails(responseMessage,expectedDetails){\r\n    for (var rowIndex = 0; rowIndex \u003c expectedDetails.length; rowIndex++) {\r\n      var expectedDetail = expectedDetails[rowIndex]\r\n      gauge.message(\"verify code lens details\")\r\n\r\n      assert.deepEqual(responseMessage[rowIndex].range, expectedDetail.range);\r\n\r\n      assert.equal(responseMessage[rowIndex].command.title, expectedDetail.command.title)\r\n      assert.equal(responseMessage[rowIndex].command.command, expectedDetail.command.command)\r\n\r\n      // Todo refactor the way arguments are asserted\r\n      //      assert.equal(responseMessage[rowIndex].command.arguments[0], expectedDetail.command.arguments[0])\r\n      if(responseMessage[rowIndex].command.arguments[1])\r\n          assert.deepEqual(responseMessage[rowIndex].command.arguments[1], expectedDetail.command.arguments[1])\r\n      assert.equal(responseMessage[rowIndex].command.arguments[2], expectedDetail.command.arguments[2])    \r\n    }  \r\n}"}]}
08:34:41.682 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/circular-references.spec","diagnostics":[]}
08:34:41.682 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/concept-diagnostics.spec","diagnostics":[]}
08:34:41.682 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/parameters.spec","diagnostics":[]}
08:34:41.682 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/steps.spec","diagnostics":[]}
08:34:41.682 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/tags.spec","diagnostics":[]}
08:34:41.682 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/findUsages.spec","diagnostics":[{"range":{"start":{"line":20,"character":0},"end":{"line":20,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":28,"character":0},"end":{"line":28,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:41.682 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/generateStubs/generateStubs.spec","diagnostics":[]}
08:34:41.682 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20concept.spec","diagnostics":[]}
08:34:41.682 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20step%20definition.spec","diagnostics":[]}
08:34:41.682 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/runLinks.spec","diagnostics":[]}
08:34:41.683 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/duplicate%20diagnostics.spec","diagnostics":[]}
08:34:41.683 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/format.spec","diagnostics":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:41.683 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/specification%20diagnostics.spec","diagnostics":[]}
08:34:41.821 --> notif: textDocument/didChange: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js","version":64},"contentChanges":[{"text":"'use strict';\r\nvar assert = require('assert');\r\n\r\nvar languageclient = require('./lsp/languageclient');\r\nvar builder = require('./lsp/util/dataBuilder');\r\n\r\nstep(\"should be able to find usages in \u003carg0\u003e second(s) for data \u003carg1\u003e\", async function(arg0, arg1) {\r\n    var details = builder.loadData(data)\r\n    var file = details[0].uri\r\n    var start = Date.now()  \r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n    finally{\r\n        var end = Date.now()\r\n        console.log(start)\r\n    }\r\n});\r\n\r\nstep('ensure code lens has details \u003cdata\u003e', async function (data) {\r\n    var details = builder.loadData(data)\r\n\r\n    var expectedDetails = builder.buildExpectedCodeLens(details);  \r\n    var file = details[0].uri\r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n        handleCodeLensDetails(response,expectedDetails)    \r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n});\r\n\r\nfunction handleCodeLensDetails(responseMessage,expectedDetails){\r\n    for (var rowIndex = 0; rowIndex \u003c expectedDetails.length; rowIndex++) {\r\n      var expectedDetail = expectedDetails[rowIndex]\r\n      gauge.message(\"verify code lens details\")\r\n\r\n      assert.deepEqual(responseMessage[rowIndex].range, expectedDetail.range);\r\n\r\n      assert.equal(responseMessage[rowIndex].command.title, expectedDetail.command.title)\r\n      assert.equal(responseMessage[rowIndex].command.command, expectedDetail.command.command)\r\n\r\n      // Todo refactor the way arguments are asserted\r\n      //      assert.equal(responseMessage[rowIndex].command.arguments[0], expectedDetail.command.arguments[0])\r\n      if(responseMessage[rowIndex].command.arguments[1])\r\n          assert.deepEqual(responseMessage[rowIndex].command.arguments[1], expectedDetail.command.arguments[1])\r\n      assert.equal(responseMessage[rowIndex].command.arguments[2], expectedDetail.command.arguments[2])    \r\n    }  \r\n}"}]}
08:34:41.846 --> request #35: textDocument/codeLens: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js"}}
08:34:41.848 <-- result #35: textDocument/codeLens: [{"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":14}},"command":{"title":"1 reference(s)","command":"gauge.showReferences","arguments":["file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js",{"line":6,"character":0},"should be able to find usages in {} second(s) for data {}"]}},{"range":{"start":{"line":23,"character":0},"end":{"line":23,"character":14}},"command":{"title":"4 reference(s)","command":"gauge.showReferences","arguments":["file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js",{"line":23,"character":0},"ensure code lens has details {}"]}}]
08:34:41.900 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/parameters.spec","diagnostics":[]}
08:34:41.900 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/tags.spec","diagnostics":[]}
08:34:41.900 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/findUsages.spec","diagnostics":[{"range":{"start":{"line":20,"character":0},"end":{"line":20,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":28,"character":0},"end":{"line":28,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:41.900 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/runLinks.spec","diagnostics":[]}
08:34:41.900 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20concept.spec","diagnostics":[]}
08:34:41.900 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/steps.spec","diagnostics":[]}
08:34:41.900 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/circular-references.spec","diagnostics":[]}
08:34:41.900 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/concept-diagnostics.spec","diagnostics":[]}
08:34:41.900 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/duplicate%20diagnostics.spec","diagnostics":[]}
08:34:41.900 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/format.spec","diagnostics":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:41.900 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/specification%20diagnostics.spec","diagnostics":[]}
08:34:41.900 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/generateStubs/generateStubs.spec","diagnostics":[]}
08:34:41.900 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20step%20definition.spec","diagnostics":[]}
08:34:42.173 --> notif: textDocument/didChange: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js","version":65},"contentChanges":[{"text":"'use strict';\r\nvar assert = require('assert');\r\n\r\nvar languageclient = require('./lsp/languageclient');\r\nvar builder = require('./lsp/util/dataBuilder');\r\n\r\nstep(\"should be able to find usages in \u003carg0\u003e second(s) for data \u003carg1\u003e\", async function(arg0, arg1) {\r\n    var details = builder.loadData(data)\r\n    var file = details[0].uri\r\n    var start = Date.now()  \r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n    finally{\r\n        var end = Date.now()\r\n        console.log(start)\r\n    }\r\n});\r\n\r\nstep('ensure code lens has details \u003cdata\u003e', async function (data) {\r\n    var details = builder.loadData(data)\r\n\r\n    var expectedDetails = builder.buildExpectedCodeLens(details);  \r\n    var file = details[0].uri\r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n        handleCodeLensDetails(response,expectedDetails)    \r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n});\r\n\r\nfunction handleCodeLensDetails(responseMessage,expectedDetails){\r\n    for (var rowIndex = 0; rowIndex \u003c expectedDetails.length; rowIndex++) {\r\n      var expectedDetail = expectedDetails[rowIndex]\r\n      gauge.message(\"verify code lens details\")\r\n\r\n      assert.deepEqual(responseMessage[rowIndex].range, expectedDetail.range);\r\n\r\n      assert.equal(responseMessage[rowIndex].command.title, expectedDetail.command.title)\r\n      assert.equal(responseMessage[rowIndex].command.command, expectedDetail.command.command)\r\n\r\n      // Todo refactor the way arguments are asserted\r\n      //      assert.equal(responseMessage[rowIndex].command.arguments[0], expectedDetail.command.arguments[0])\r\n      if(responseMessage[rowIndex].command.arguments[1])\r\n          assert.deepEqual(responseMessage[rowIndex].command.arguments[1], expectedDetail.command.arguments[1])\r\n      assert.equal(responseMessage[rowIndex].command.arguments[2], expectedDetail.command.arguments[2])    \r\n    }  \r\n}"}]}
08:34:42.209 --> request #36: textDocument/codeLens: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js"}}
08:34:42.210 <-- result #36: textDocument/codeLens: [{"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":14}},"command":{"title":"1 reference(s)","command":"gauge.showReferences","arguments":["file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js",{"line":6,"character":0},"should be able to find usages in {} second(s) for data {}"]}},{"range":{"start":{"line":23,"character":0},"end":{"line":23,"character":14}},"command":{"title":"4 reference(s)","command":"gauge.showReferences","arguments":["file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js",{"line":23,"character":0},"ensure code lens has details {}"]}}]
08:34:42.252 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/parameters.spec","diagnostics":[]}
08:34:42.253 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/steps.spec","diagnostics":[]}
08:34:42.253 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/duplicate%20diagnostics.spec","diagnostics":[]}
08:34:42.253 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/specification%20diagnostics.spec","diagnostics":[]}
08:34:42.253 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20step%20definition.spec","diagnostics":[]}
08:34:42.253 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/tags.spec","diagnostics":[]}
08:34:42.253 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/findUsages.spec","diagnostics":[{"range":{"start":{"line":20,"character":0},"end":{"line":20,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":28,"character":0},"end":{"line":28,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:42.253 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/runLinks.spec","diagnostics":[]}
08:34:42.253 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/circular-references.spec","diagnostics":[]}
08:34:42.253 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/concept-diagnostics.spec","diagnostics":[]}
08:34:42.253 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/format.spec","diagnostics":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:42.253 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/generateStubs/generateStubs.spec","diagnostics":[]}
08:34:42.253 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20concept.spec","diagnostics":[]}
08:34:42.998 --> notif: textDocument/didChange: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js","version":66},"contentChanges":[{"text":"'use strict';\r\nvar assert = require('assert');\r\n\r\nvar languageclient = require('./lsp/languageclient');\r\nvar builder = require('./lsp/util/dataBuilder');\r\n\r\nstep(\"should be able to find usages in \u003carg0\u003e second(s) for data \u003carg1\u003e\", async function(arg0, arg1) {\r\n    var details = builder.loadData(data)\r\n    var file = details[0].uri\r\n    var start = Date.now()  \r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n    finally{\r\n        var end = Date.now()\r\n        console.log(start-)\r\n    }\r\n});\r\n\r\nstep('ensure code lens has details \u003cdata\u003e', async function (data) {\r\n    var details = builder.loadData(data)\r\n\r\n    var expectedDetails = builder.buildExpectedCodeLens(details);  \r\n    var file = details[0].uri\r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n        handleCodeLensDetails(response,expectedDetails)    \r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n});\r\n\r\nfunction handleCodeLensDetails(responseMessage,expectedDetails){\r\n    for (var rowIndex = 0; rowIndex \u003c expectedDetails.length; rowIndex++) {\r\n      var expectedDetail = expectedDetails[rowIndex]\r\n      gauge.message(\"verify code lens details\")\r\n\r\n      assert.deepEqual(responseMessage[rowIndex].range, expectedDetail.range);\r\n\r\n      assert.equal(responseMessage[rowIndex].command.title, expectedDetail.command.title)\r\n      assert.equal(responseMessage[rowIndex].command.command, expectedDetail.command.command)\r\n\r\n      // Todo refactor the way arguments are asserted\r\n      //      assert.equal(responseMessage[rowIndex].command.arguments[0], expectedDetail.command.arguments[0])\r\n      if(responseMessage[rowIndex].command.arguments[1])\r\n          assert.deepEqual(responseMessage[rowIndex].command.arguments[1], expectedDetail.command.arguments[1])\r\n      assert.equal(responseMessage[rowIndex].command.arguments[2], expectedDetail.command.arguments[2])    \r\n    }  \r\n}"}]}
08:34:43.041 --> request #37: textDocument/codeLens: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js"}}
08:34:43.042 <-- result #37: textDocument/codeLens: [{"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":14}},"command":{"title":"1 reference(s)","command":"gauge.showReferences","arguments":["file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js",{"line":6,"character":0},"should be able to find usages in {} second(s) for data {}"]}},{"range":{"start":{"line":23,"character":0},"end":{"line":23,"character":14}},"command":{"title":"4 reference(s)","command":"gauge.showReferences","arguments":["file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js",{"line":23,"character":0},"ensure code lens has details {}"]}}]
08:34:43.055 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/steps.spec","diagnostics":[]}
08:34:43.055 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/runLinks.spec","diagnostics":[]}
08:34:43.055 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/duplicate%20diagnostics.spec","diagnostics":[]}
08:34:43.055 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/specification%20diagnostics.spec","diagnostics":[]}
08:34:43.055 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20concept.spec","diagnostics":[]}
08:34:43.055 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20step%20definition.spec","diagnostics":[]}
08:34:43.055 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/parameters.spec","diagnostics":[]}
08:34:43.055 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/findUsages.spec","diagnostics":[{"range":{"start":{"line":20,"character":0},"end":{"line":20,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":28,"character":0},"end":{"line":28,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:43.055 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/circular-references.spec","diagnostics":[]}
08:34:43.055 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/concept-diagnostics.spec","diagnostics":[]}
08:34:43.055 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/format.spec","diagnostics":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:43.055 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/generateStubs/generateStubs.spec","diagnostics":[]}
08:34:43.055 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/tags.spec","diagnostics":[]}
08:34:43.811 --> notif: textDocument/didChange: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js","version":67},"contentChanges":[{"text":"'use strict';\r\nvar assert = require('assert');\r\n\r\nvar languageclient = require('./lsp/languageclient');\r\nvar builder = require('./lsp/util/dataBuilder');\r\n\r\nstep(\"should be able to find usages in \u003carg0\u003e second(s) for data \u003carg1\u003e\", async function(arg0, arg1) {\r\n    var details = builder.loadData(data)\r\n    var file = details[0].uri\r\n    var start = Date.now()  \r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n    finally{\r\n        var end = Date.now()\r\n        console.log(start)\r\n    }\r\n});\r\n\r\nstep('ensure code lens has details \u003cdata\u003e', async function (data) {\r\n    var details = builder.loadData(data)\r\n\r\n    var expectedDetails = builder.buildExpectedCodeLens(details);  \r\n    var file = details[0].uri\r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n        handleCodeLensDetails(response,expectedDetails)    \r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n});\r\n\r\nfunction handleCodeLensDetails(responseMessage,expectedDetails){\r\n    for (var rowIndex = 0; rowIndex \u003c expectedDetails.length; rowIndex++) {\r\n      var expectedDetail = expectedDetails[rowIndex]\r\n      gauge.message(\"verify code lens details\")\r\n\r\n      assert.deepEqual(responseMessage[rowIndex].range, expectedDetail.range);\r\n\r\n      assert.equal(responseMessage[rowIndex].command.title, expectedDetail.command.title)\r\n      assert.equal(responseMessage[rowIndex].command.command, expectedDetail.command.command)\r\n\r\n      // Todo refactor the way arguments are asserted\r\n      //      assert.equal(responseMessage[rowIndex].command.arguments[0], expectedDetail.command.arguments[0])\r\n      if(responseMessage[rowIndex].command.arguments[1])\r\n          assert.deepEqual(responseMessage[rowIndex].command.arguments[1], expectedDetail.command.arguments[1])\r\n      assert.equal(responseMessage[rowIndex].command.arguments[2], expectedDetail.command.arguments[2])    \r\n    }  \r\n}"}]}
08:34:43.878 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/circular-references.spec","diagnostics":[]}
08:34:43.878 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/specification%20diagnostics.spec","diagnostics":[]}
08:34:43.878 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/generateStubs/generateStubs.spec","diagnostics":[]}
08:34:43.878 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/steps.spec","diagnostics":[]}
08:34:43.878 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/findUsages.spec","diagnostics":[{"range":{"start":{"line":20,"character":0},"end":{"line":20,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":28,"character":0},"end":{"line":28,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:43.878 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/runLinks.spec","diagnostics":[]}
08:34:43.878 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/concept-diagnostics.spec","diagnostics":[]}
08:34:43.878 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/duplicate%20diagnostics.spec","diagnostics":[]}
08:34:43.878 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/format.spec","diagnostics":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:43.878 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20concept.spec","diagnostics":[]}
08:34:43.878 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20step%20definition.spec","diagnostics":[]}
08:34:43.878 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/parameters.spec","diagnostics":[]}
08:34:43.878 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/tags.spec","diagnostics":[]}
08:34:44.640 --> notif: textDocument/didChange: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js","version":72},"contentChanges":[{"text":"'use strict';\r\nvar assert = require('assert');\r\n\r\nvar languageclient = require('./lsp/languageclient');\r\nvar builder = require('./lsp/util/dataBuilder');\r\n\r\nstep(\"should be able to find usages in \u003carg0\u003e second(s) for data \u003carg1\u003e\", async function(arg0, arg1) {\r\n    var details = builder.loadData(data)\r\n    var file = details[0].uri\r\n    var start = Date.now()  \r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n    finally{\r\n        var end = Date.now()\r\n        console.log()\r\n    }\r\n});\r\n\r\nstep('ensure code lens has details \u003cdata\u003e', async function (data) {\r\n    var details = builder.loadData(data)\r\n\r\n    var expectedDetails = builder.buildExpectedCodeLens(details);  \r\n    var file = details[0].uri\r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n        handleCodeLensDetails(response,expectedDetails)    \r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n});\r\n\r\nfunction handleCodeLensDetails(responseMessage,expectedDetails){\r\n    for (var rowIndex = 0; rowIndex \u003c expectedDetails.length; rowIndex++) {\r\n      var expectedDetail = expectedDetails[rowIndex]\r\n      gauge.message(\"verify code lens details\")\r\n\r\n      assert.deepEqual(responseMessage[rowIndex].range, expectedDetail.range);\r\n\r\n      assert.equal(responseMessage[rowIndex].command.title, expectedDetail.command.title)\r\n      assert.equal(responseMessage[rowIndex].command.command, expectedDetail.command.command)\r\n\r\n      // Todo refactor the way arguments are asserted\r\n      //      assert.equal(responseMessage[rowIndex].command.arguments[0], expectedDetail.command.arguments[0])\r\n      if(responseMessage[rowIndex].command.arguments[1])\r\n          assert.deepEqual(responseMessage[rowIndex].command.arguments[1], expectedDetail.command.arguments[1])\r\n      assert.equal(responseMessage[rowIndex].command.arguments[2], expectedDetail.command.arguments[2])    \r\n    }  \r\n}"}]}
08:34:44.674 --> request #38: textDocument/codeLens: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js"}}
08:34:44.675 <-- result #38: textDocument/codeLens: [{"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":14}},"command":{"title":"1 reference(s)","command":"gauge.showReferences","arguments":["file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js",{"line":6,"character":0},"should be able to find usages in {} second(s) for data {}"]}},{"range":{"start":{"line":23,"character":0},"end":{"line":23,"character":14}},"command":{"title":"4 reference(s)","command":"gauge.showReferences","arguments":["file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js",{"line":23,"character":0},"ensure code lens has details {}"]}}]
08:34:44.694 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/findUsages.spec","diagnostics":[{"range":{"start":{"line":20,"character":0},"end":{"line":20,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":28,"character":0},"end":{"line":28,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:44.694 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/concept-diagnostics.spec","diagnostics":[]}
08:34:44.694 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/specification%20diagnostics.spec","diagnostics":[]}
08:34:44.694 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/generateStubs/generateStubs.spec","diagnostics":[]}
08:34:44.694 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/parameters.spec","diagnostics":[]}
08:34:44.694 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/steps.spec","diagnostics":[]}
08:34:44.694 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/circular-references.spec","diagnostics":[]}
08:34:44.694 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/duplicate%20diagnostics.spec","diagnostics":[]}
08:34:44.694 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/format.spec","diagnostics":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:44.694 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20concept.spec","diagnostics":[]}
08:34:44.694 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20step%20definition.spec","diagnostics":[]}
08:34:44.695 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/tags.spec","diagnostics":[]}
08:34:44.695 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/runLinks.spec","diagnostics":[]}
08:34:45.113 --> notif: textDocument/didChange: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js","version":74},"contentChanges":[{"text":"'use strict';\r\nvar assert = require('assert');\r\n\r\nvar languageclient = require('./lsp/languageclient');\r\nvar builder = require('./lsp/util/dataBuilder');\r\n\r\nstep(\"should be able to find usages in \u003carg0\u003e second(s) for data \u003carg1\u003e\", async function(arg0, arg1) {\r\n    var details = builder.loadData(data)\r\n    var file = details[0].uri\r\n    var start = Date.now()  \r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n    finally{\r\n        var end = Date.now()\r\n        console.log(en)\r\n    }\r\n});\r\n\r\nstep('ensure code lens has details \u003cdata\u003e', async function (data) {\r\n    var details = builder.loadData(data)\r\n\r\n    var expectedDetails = builder.buildExpectedCodeLens(details);  \r\n    var file = details[0].uri\r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n        handleCodeLensDetails(response,expectedDetails)    \r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n});\r\n\r\nfunction handleCodeLensDetails(responseMessage,expectedDetails){\r\n    for (var rowIndex = 0; rowIndex \u003c expectedDetails.length; rowIndex++) {\r\n      var expectedDetail = expectedDetails[rowIndex]\r\n      gauge.message(\"verify code lens details\")\r\n\r\n      assert.deepEqual(responseMessage[rowIndex].range, expectedDetail.range);\r\n\r\n      assert.equal(responseMessage[rowIndex].command.title, expectedDetail.command.title)\r\n      assert.equal(responseMessage[rowIndex].command.command, expectedDetail.command.command)\r\n\r\n      // Todo refactor the way arguments are asserted\r\n      //      assert.equal(responseMessage[rowIndex].command.arguments[0], expectedDetail.command.arguments[0])\r\n      if(responseMessage[rowIndex].command.arguments[1])\r\n          assert.deepEqual(responseMessage[rowIndex].command.arguments[1], expectedDetail.command.arguments[1])\r\n      assert.equal(responseMessage[rowIndex].command.arguments[2], expectedDetail.command.arguments[2])    \r\n    }  \r\n}"}]}
08:34:45.150 --> request #39: textDocument/codeLens: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js"}}
08:34:45.151 <-- result #39: textDocument/codeLens: [{"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":14}},"command":{"title":"1 reference(s)","command":"gauge.showReferences","arguments":["file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js",{"line":6,"character":0},"should be able to find usages in {} second(s) for data {}"]}},{"range":{"start":{"line":23,"character":0},"end":{"line":23,"character":14}},"command":{"title":"4 reference(s)","command":"gauge.showReferences","arguments":["file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js",{"line":23,"character":0},"ensure code lens has details {}"]}}]
08:34:45.173 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/tags.spec","diagnostics":[]}
08:34:45.173 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/findUsages.spec","diagnostics":[{"range":{"start":{"line":20,"character":0},"end":{"line":20,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":28,"character":0},"end":{"line":28,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:45.173 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/specification%20diagnostics.spec","diagnostics":[]}
08:34:45.173 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/duplicate%20diagnostics.spec","diagnostics":[]}
08:34:45.173 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/format.spec","diagnostics":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:45.173 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/generateStubs/generateStubs.spec","diagnostics":[]}
08:34:45.173 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/parameters.spec","diagnostics":[]}
08:34:45.173 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/steps.spec","diagnostics":[]}
08:34:45.173 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/runLinks.spec","diagnostics":[]}
08:34:45.173 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/circular-references.spec","diagnostics":[]}
08:34:45.173 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/concept-diagnostics.spec","diagnostics":[]}
08:34:45.173 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20concept.spec","diagnostics":[]}
08:34:45.173 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20step%20definition.spec","diagnostics":[]}
08:34:45.699 --> notif: textDocument/didChange: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js","version":75},"contentChanges":[{"text":"'use strict';\r\nvar assert = require('assert');\r\n\r\nvar languageclient = require('./lsp/languageclient');\r\nvar builder = require('./lsp/util/dataBuilder');\r\n\r\nstep(\"should be able to find usages in \u003carg0\u003e second(s) for data \u003carg1\u003e\", async function(arg0, arg1) {\r\n    var details = builder.loadData(data)\r\n    var file = details[0].uri\r\n    var start = Date.now()  \r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n    finally{\r\n        var end = Date.now()\r\n        console.log(end)\r\n    }\r\n});\r\n\r\nstep('ensure code lens has details \u003cdata\u003e', async function (data) {\r\n    var details = builder.loadData(data)\r\n\r\n    var expectedDetails = builder.buildExpectedCodeLens(details);  \r\n    var file = details[0].uri\r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n        handleCodeLensDetails(response,expectedDetails)    \r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n});\r\n\r\nfunction handleCodeLensDetails(responseMessage,expectedDetails){\r\n    for (var rowIndex = 0; rowIndex \u003c expectedDetails.length; rowIndex++) {\r\n      var expectedDetail = expectedDetails[rowIndex]\r\n      gauge.message(\"verify code lens details\")\r\n\r\n      assert.deepEqual(responseMessage[rowIndex].range, expectedDetail.range);\r\n\r\n      assert.equal(responseMessage[rowIndex].command.title, expectedDetail.command.title)\r\n      assert.equal(responseMessage[rowIndex].command.command, expectedDetail.command.command)\r\n\r\n      // Todo refactor the way arguments are asserted\r\n      //      assert.equal(responseMessage[rowIndex].command.arguments[0], expectedDetail.command.arguments[0])\r\n      if(responseMessage[rowIndex].command.arguments[1])\r\n          assert.deepEqual(responseMessage[rowIndex].command.arguments[1], expectedDetail.command.arguments[1])\r\n      assert.equal(responseMessage[rowIndex].command.arguments[2], expectedDetail.command.arguments[2])    \r\n    }  \r\n}"}]}
08:34:45.730 --> request #40: textDocument/codeLens: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js"}}
08:34:45.731 <-- result #40: textDocument/codeLens: [{"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":14}},"command":{"title":"1 reference(s)","command":"gauge.showReferences","arguments":["file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js",{"line":6,"character":0},"should be able to find usages in {} second(s) for data {}"]}},{"range":{"start":{"line":23,"character":0},"end":{"line":23,"character":14}},"command":{"title":"4 reference(s)","command":"gauge.showReferences","arguments":["file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js",{"line":23,"character":0},"ensure code lens has details {}"]}}]
08:34:45.751 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/findUsages.spec","diagnostics":[{"range":{"start":{"line":20,"character":0},"end":{"line":20,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":28,"character":0},"end":{"line":28,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:45.752 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/runLinks.spec","diagnostics":[]}
08:34:45.752 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/specification%20diagnostics.spec","diagnostics":[]}
08:34:45.752 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/generateStubs/generateStubs.spec","diagnostics":[]}
08:34:45.752 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20step%20definition.spec","diagnostics":[]}
08:34:45.752 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/parameters.spec","diagnostics":[]}
08:34:45.752 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/steps.spec","diagnostics":[]}
08:34:45.752 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/tags.spec","diagnostics":[]}
08:34:45.752 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/circular-references.spec","diagnostics":[]}
08:34:45.752 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/concept-diagnostics.spec","diagnostics":[]}
08:34:45.752 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/duplicate%20diagnostics.spec","diagnostics":[]}
08:34:45.752 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/format.spec","diagnostics":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:45.752 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20concept.spec","diagnostics":[]}
08:34:46.470 --> notif: textDocument/didChange: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js","version":76},"contentChanges":[{"text":"'use strict';\r\nvar assert = require('assert');\r\n\r\nvar languageclient = require('./lsp/languageclient');\r\nvar builder = require('./lsp/util/dataBuilder');\r\n\r\nstep(\"should be able to find usages in \u003carg0\u003e second(s) for data \u003carg1\u003e\", async function(arg0, arg1) {\r\n    var details = builder.loadData(data)\r\n    var file = details[0].uri\r\n    var start = Date.now()  \r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n    finally{\r\n        var end = Date.now()\r\n        console.log(end-)\r\n    }\r\n});\r\n\r\nstep('ensure code lens has details \u003cdata\u003e', async function (data) {\r\n    var details = builder.loadData(data)\r\n\r\n    var expectedDetails = builder.buildExpectedCodeLens(details);  \r\n    var file = details[0].uri\r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n        handleCodeLensDetails(response,expectedDetails)    \r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n});\r\n\r\nfunction handleCodeLensDetails(responseMessage,expectedDetails){\r\n    for (var rowIndex = 0; rowIndex \u003c expectedDetails.length; rowIndex++) {\r\n      var expectedDetail = expectedDetails[rowIndex]\r\n      gauge.message(\"verify code lens details\")\r\n\r\n      assert.deepEqual(responseMessage[rowIndex].range, expectedDetail.range);\r\n\r\n      assert.equal(responseMessage[rowIndex].command.title, expectedDetail.command.title)\r\n      assert.equal(responseMessage[rowIndex].command.command, expectedDetail.command.command)\r\n\r\n      // Todo refactor the way arguments are asserted\r\n      //      assert.equal(responseMessage[rowIndex].command.arguments[0], expectedDetail.command.arguments[0])\r\n      if(responseMessage[rowIndex].command.arguments[1])\r\n          assert.deepEqual(responseMessage[rowIndex].command.arguments[1], expectedDetail.command.arguments[1])\r\n      assert.equal(responseMessage[rowIndex].command.arguments[2], expectedDetail.command.arguments[2])    \r\n    }  \r\n}"}]}
08:34:46.513 --> request #41: textDocument/codeLens: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js"}}
08:34:46.517 <-- result #41: textDocument/codeLens: [{"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":14}},"command":{"title":"1 reference(s)","command":"gauge.showReferences","arguments":["file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js",{"line":6,"character":0},"should be able to find usages in {} second(s) for data {}"]}},{"range":{"start":{"line":23,"character":0},"end":{"line":23,"character":14}},"command":{"title":"4 reference(s)","command":"gauge.showReferences","arguments":["file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js",{"line":23,"character":0},"ensure code lens has details {}"]}}]
08:34:46.566 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/concept-diagnostics.spec","diagnostics":[]}
08:34:46.566 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/duplicate%20diagnostics.spec","diagnostics":[]}
08:34:46.566 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20concept.spec","diagnostics":[]}
08:34:46.566 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/specification%20diagnostics.spec","diagnostics":[]}
08:34:46.566 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/parameters.spec","diagnostics":[]}
08:34:46.566 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/steps.spec","diagnostics":[]}
08:34:46.566 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/tags.spec","diagnostics":[]}
08:34:46.566 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/findUsages.spec","diagnostics":[{"range":{"start":{"line":20,"character":0},"end":{"line":20,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":28,"character":0},"end":{"line":28,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:46.566 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/runLinks.spec","diagnostics":[]}
08:34:46.566 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/circular-references.spec","diagnostics":[]}
08:34:46.567 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/format.spec","diagnostics":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:46.567 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/generateStubs/generateStubs.spec","diagnostics":[]}
08:34:46.567 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20step%20definition.spec","diagnostics":[]}
08:34:46.999 --> notif: textDocument/didChange: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js","version":78},"contentChanges":[{"text":"'use strict';\r\nvar assert = require('assert');\r\n\r\nvar languageclient = require('./lsp/languageclient');\r\nvar builder = require('./lsp/util/dataBuilder');\r\n\r\nstep(\"should be able to find usages in \u003carg0\u003e second(s) for data \u003carg1\u003e\", async function(arg0, arg1) {\r\n    var details = builder.loadData(data)\r\n    var file = details[0].uri\r\n    var start = Date.now()  \r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n    finally{\r\n        var end = Date.now()\r\n        console.log(end-st)\r\n    }\r\n});\r\n\r\nstep('ensure code lens has details \u003cdata\u003e', async function (data) {\r\n    var details = builder.loadData(data)\r\n\r\n    var expectedDetails = builder.buildExpectedCodeLens(details);  \r\n    var file = details[0].uri\r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n        handleCodeLensDetails(response,expectedDetails)    \r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n});\r\n\r\nfunction handleCodeLensDetails(responseMessage,expectedDetails){\r\n    for (var rowIndex = 0; rowIndex \u003c expectedDetails.length; rowIndex++) {\r\n      var expectedDetail = expectedDetails[rowIndex]\r\n      gauge.message(\"verify code lens details\")\r\n\r\n      assert.deepEqual(responseMessage[rowIndex].range, expectedDetail.range);\r\n\r\n      assert.equal(responseMessage[rowIndex].command.title, expectedDetail.command.title)\r\n      assert.equal(responseMessage[rowIndex].command.command, expectedDetail.command.command)\r\n\r\n      // Todo refactor the way arguments are asserted\r\n      //      assert.equal(responseMessage[rowIndex].command.arguments[0], expectedDetail.command.arguments[0])\r\n      if(responseMessage[rowIndex].command.arguments[1])\r\n          assert.deepEqual(responseMessage[rowIndex].command.arguments[1], expectedDetail.command.arguments[1])\r\n      assert.equal(responseMessage[rowIndex].command.arguments[2], expectedDetail.command.arguments[2])    \r\n    }  \r\n}"}]}
08:34:47.025 --> request #42: textDocument/codeLens: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js"}}
08:34:47.028 <-- result #42: textDocument/codeLens: [{"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":14}},"command":{"title":"1 reference(s)","command":"gauge.showReferences","arguments":["file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js",{"line":6,"character":0},"should be able to find usages in {} second(s) for data {}"]}},{"range":{"start":{"line":23,"character":0},"end":{"line":23,"character":14}},"command":{"title":"4 reference(s)","command":"gauge.showReferences","arguments":["file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js",{"line":23,"character":0},"ensure code lens has details {}"]}}]
08:34:47.083 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/generateStubs/generateStubs.spec","diagnostics":[]}
08:34:47.083 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20concept.spec","diagnostics":[]}
08:34:47.083 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/parameters.spec","diagnostics":[]}
08:34:47.083 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/tags.spec","diagnostics":[]}
08:34:47.083 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/circular-references.spec","diagnostics":[]}
08:34:47.083 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/concept-diagnostics.spec","diagnostics":[]}
08:34:47.083 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/format.spec","diagnostics":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:47.083 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20step%20definition.spec","diagnostics":[]}
08:34:47.083 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/steps.spec","diagnostics":[]}
08:34:47.083 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/findUsages.spec","diagnostics":[{"range":{"start":{"line":20,"character":0},"end":{"line":20,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":28,"character":0},"end":{"line":28,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:47.083 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/runLinks.spec","diagnostics":[]}
08:34:47.083 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/duplicate%20diagnostics.spec","diagnostics":[]}
08:34:47.083 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/specification%20diagnostics.spec","diagnostics":[]}
08:34:47.749 --> notif: textDocument/didChange: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js","version":79},"contentChanges":[{"text":"'use strict';\r\nvar assert = require('assert');\r\n\r\nvar languageclient = require('./lsp/languageclient');\r\nvar builder = require('./lsp/util/dataBuilder');\r\n\r\nstep(\"should be able to find usages in \u003carg0\u003e second(s) for data \u003carg1\u003e\", async function(arg0, arg1) {\r\n    var details = builder.loadData(data)\r\n    var file = details[0].uri\r\n    var start = Date.now()  \r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n    finally{\r\n        var end = Date.now()\r\n        console.log(end-start)\r\n    }\r\n});\r\n\r\nstep('ensure code lens has details \u003cdata\u003e', async function (data) {\r\n    var details = builder.loadData(data)\r\n\r\n    var expectedDetails = builder.buildExpectedCodeLens(details);  \r\n    var file = details[0].uri\r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n        handleCodeLensDetails(response,expectedDetails)    \r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n});\r\n\r\nfunction handleCodeLensDetails(responseMessage,expectedDetails){\r\n    for (var rowIndex = 0; rowIndex \u003c expectedDetails.length; rowIndex++) {\r\n      var expectedDetail = expectedDetails[rowIndex]\r\n      gauge.message(\"verify code lens details\")\r\n\r\n      assert.deepEqual(responseMessage[rowIndex].range, expectedDetail.range);\r\n\r\n      assert.equal(responseMessage[rowIndex].command.title, expectedDetail.command.title)\r\n      assert.equal(responseMessage[rowIndex].command.command, expectedDetail.command.command)\r\n\r\n      // Todo refactor the way arguments are asserted\r\n      //      assert.equal(responseMessage[rowIndex].command.arguments[0], expectedDetail.command.arguments[0])\r\n      if(responseMessage[rowIndex].command.arguments[1])\r\n          assert.deepEqual(responseMessage[rowIndex].command.arguments[1], expectedDetail.command.arguments[1])\r\n      assert.equal(responseMessage[rowIndex].command.arguments[2], expectedDetail.command.arguments[2])    \r\n    }  \r\n}"}]}
08:34:47.787 --> request #43: textDocument/codeLens: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js"}}
08:34:47.788 <-- result #43: textDocument/codeLens: [{"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":14}},"command":{"title":"1 reference(s)","command":"gauge.showReferences","arguments":["file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js",{"line":6,"character":0},"should be able to find usages in {} second(s) for data {}"]}},{"range":{"start":{"line":23,"character":0},"end":{"line":23,"character":14}},"command":{"title":"4 reference(s)","command":"gauge.showReferences","arguments":["file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js",{"line":23,"character":0},"ensure code lens has details {}"]}}]
08:34:47.810 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/format.spec","diagnostics":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:47.810 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/generateStubs/generateStubs.spec","diagnostics":[]}
08:34:47.810 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20concept.spec","diagnostics":[]}
08:34:47.810 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/runLinks.spec","diagnostics":[]}
08:34:47.810 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/steps.spec","diagnostics":[]}
08:34:47.810 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/tags.spec","diagnostics":[]}
08:34:47.810 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/findUsages.spec","diagnostics":[{"range":{"start":{"line":20,"character":0},"end":{"line":20,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":28,"character":0},"end":{"line":28,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:47.810 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/circular-references.spec","diagnostics":[]}
08:34:47.810 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/concept-diagnostics.spec","diagnostics":[]}
08:34:47.810 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/duplicate%20diagnostics.spec","diagnostics":[]}
08:34:47.810 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/specification%20diagnostics.spec","diagnostics":[]}
08:34:47.810 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/parameters.spec","diagnostics":[]}
08:34:47.810 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20step%20definition.spec","diagnostics":[]}
08:34:48.583 --> notif: textDocument/didChange: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js","version":79},"contentChanges":[{"text":"'use strict';\r\nvar assert = require('assert');\r\n\r\nvar languageclient = require('./lsp/languageclient');\r\nvar builder = require('./lsp/util/dataBuilder');\r\n\r\nstep(\"should be able to find usages in \u003carg0\u003e second(s) for data \u003carg1\u003e\", async function(arg0, arg1) {\r\n    var details = builder.loadData(data)\r\n    var file = details[0].uri\r\n    var start = Date.now()  \r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n    finally{\r\n        var end = Date.now()\r\n        console.log(end-start)\r\n    }\r\n});\r\n\r\nstep('ensure code lens has details \u003cdata\u003e', async function (data) {\r\n    var details = builder.loadData(data)\r\n\r\n    var expectedDetails = builder.buildExpectedCodeLens(details);  \r\n    var file = details[0].uri\r\n\r\n    try{\r\n        var response = await languageclient.codeLens(file)\r\n        handleCodeLensDetails(response,expectedDetails)    \r\n    }\r\n    catch(err){\r\n        throw new Error(\"unable to verify code lens details \"+err)\r\n    }\r\n});\r\n\r\nfunction handleCodeLensDetails(responseMessage,expectedDetails){\r\n    for (var rowIndex = 0; rowIndex \u003c expectedDetails.length; rowIndex++) {\r\n      var expectedDetail = expectedDetails[rowIndex]\r\n      gauge.message(\"verify code lens details\")\r\n\r\n      assert.deepEqual(responseMessage[rowIndex].range, expectedDetail.range);\r\n\r\n      assert.equal(responseMessage[rowIndex].command.title, expectedDetail.command.title)\r\n      assert.equal(responseMessage[rowIndex].command.command, expectedDetail.command.command)\r\n\r\n      // Todo refactor the way arguments are asserted\r\n      //      assert.equal(responseMessage[rowIndex].command.arguments[0], expectedDetail.command.arguments[0])\r\n      if(responseMessage[rowIndex].command.arguments[1])\r\n          assert.deepEqual(responseMessage[rowIndex].command.arguments[1], expectedDetail.command.arguments[1])\r\n      assert.equal(responseMessage[rowIndex].command.arguments[2], expectedDetail.command.arguments[2])    \r\n    }  \r\n}"}]}
08:34:48.638 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/concept-diagnostics.spec","diagnostics":[]}
08:34:48.638 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/generateStubs/generateStubs.spec","diagnostics":[]}
08:34:48.638 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20concept.spec","diagnostics":[]}
08:34:48.638 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/gotodefinition/goto%20a%20step%20definition.spec","diagnostics":[]}
08:34:48.638 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/steps.spec","diagnostics":[]}
08:34:48.638 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/tags.spec","diagnostics":[]}
08:34:48.638 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/runLinks.spec","diagnostics":[]}
08:34:48.638 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/circular-references.spec","diagnostics":[]}
08:34:48.638 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/specification%20diagnostics.spec","diagnostics":[]}
08:34:48.638 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codecompletion/parameters.spec","diagnostics":[]}
08:34:48.638 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/findUsages.spec","diagnostics":[{"range":{"start":{"line":20,"character":0},"end":{"line":20,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"},{"range":{"start":{"line":28,"character":0},"end":{"line":28,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:48.638 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/duplicate%20diagnostics.spec","diagnostics":[]}
08:34:48.638 <-- notif: textDocument/publishDiagnostics: {"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/diagnostics/format.spec","diagnostics":[{"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":10000}},"severity":1,"code":"step(\"Feature yet to be implemented\", async function() {\n\tthrow 'Unimplemented Step';\n});","message":"Step implementation not found"}]}
08:34:58.730 --> request #44: textDocument/codeAction: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/findUsages.spec"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}
08:34:58.731 <-- result #44: textDocument/codeAction: null
08:34:58.965 --> request #45: textDocument/codeLens: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/findUsages.spec"}}
08:34:58.965 <-- error #45: textDocument/codeLens: {"code":0,"message":"failed to parse specification c:\\work\\getgauge\\gauge-lsp-tests\\specs\\codelens\\findUsages.spec","data":null}
08:34:58.980 --> request #46: textDocument/codeAction: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/findUsages.spec"},"range":{"start":{"line":11,"character":27},"end":{"line":11,"character":27}},"context":{"diagnostics":[]}}
08:34:58.981 <-- result #46: textDocument/codeAction: null
08:35:04.059 --> request #47: textDocument/codeAction: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/findUsages.spec"},"range":{"start":{"line":15,"character":7},"end":{"line":15,"character":7}},"context":{"diagnostics":[]}}
08:35:04.059 <-- result #47: textDocument/codeAction: null
08:35:13.558 --> request #48: textDocument/codeAction: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/findUsages.spec"},"range":{"start":{"line":11,"character":16},"end":{"line":11,"character":16}},"context":{"diagnostics":[]}}
08:35:13.558 <-- result #48: textDocument/codeAction: null
08:35:14.822 --> request #49: textDocument/definition: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/findUsages.spec"},"position":{"line":11,"character":16}}
08:35:14.822 <-- result #49: textDocument/definition: null
08:36:49.137 --> request #50: textDocument/codeLens: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js"}}
08:36:49.138 <-- result #50: textDocument/codeLens: [{"range":{"start":{"line":6,"character":0},"end":{"line":6,"character":14}},"command":{"title":"1 reference(s)","command":"gauge.showReferences","arguments":["file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js",{"line":6,"character":0},"should be able to find usages in {} second(s) for data {}"]}},{"range":{"start":{"line":23,"character":0},"end":{"line":23,"character":14}},"command":{"title":"4 reference(s)","command":"gauge.showReferences","arguments":["file:///c%3A/work/getgauge/gauge-lsp-tests/tests/execution.js",{"line":23,"character":0},"ensure code lens has details {}"]}}]
08:37:11.016 --> request #51: gauge/stepReferences: "should be able to find usages in {} second(s) for data {}"
08:37:11.017 <-- result #51: gauge/stepReferences: [{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/findUsages.spec","range":{"start":{"line":16,"character":0},"end":{"line":16,"character":86}}}]
08:37:11.078 --> request #52: textDocument/codeAction: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/findUsages.spec"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}
08:37:11.078 <-- result #52: textDocument/codeAction: null
08:37:11.361 --> request #53: textDocument/codeLens: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/findUsages.spec"}}
08:37:11.361 <-- error #53: textDocument/codeLens: {"code":0,"message":"failed to parse specification c:\\work\\getgauge\\gauge-lsp-tests\\specs\\codelens\\findUsages.spec","data":null}
08:37:11.361 --> request #54: textDocument/codeAction: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/findUsages.spec"},"range":{"start":{"line":16,"character":0},"end":{"line":16,"character":0}},"context":{"diagnostics":[]}}
08:37:11.362 <-- result #54: textDocument/codeAction: null
08:37:12.617 --> request #55: textDocument/codeAction: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/findUsages.spec"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}
08:37:12.617 <-- result #55: textDocument/codeAction: null
08:37:12.828 --> request #56: textDocument/codeLens: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/findUsages.spec"}}
08:37:12.828 <-- error #56: textDocument/codeLens: {"code":0,"message":"failed to parse specification c:\\work\\getgauge\\gauge-lsp-tests\\specs\\codelens\\findUsages.spec","data":null}
08:37:12.831 --> request #57: textDocument/codeAction: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/findUsages.spec"},"range":{"start":{"line":16,"character":0},"end":{"line":16,"character":86}},"context":{"diagnostics":[]}}
08:37:12.831 <-- result #57: textDocument/codeAction: null
08:37:18.754 --> request #58: textDocument/codeAction: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/findUsages.spec"},"range":{"start":{"line":16,"character":86},"end":{"line":16,"character":86}},"context":{"diagnostics":[]}}
08:37:18.754 <-- result #58: textDocument/codeAction: null
08:37:47.287 --> request #59: textDocument/codeAction: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/findUsages.spec"},"range":{"start":{"line":10,"character":33},"end":{"line":10,"character":33}},"context":{"diagnostics":[]}}
08:37:47.287 <-- result #59: textDocument/codeAction: null
08:37:49.306 --> request #60: textDocument/codeAction: {"textDocument":{"uri":"file:///c%3A/work/getgauge/gauge-lsp-tests/specs/codelens/findUsages.spec"},"range":{"start":{"line":11,"character":63},"end":{"line":11,"character":63}},"context":{"diagnostics":[]}}
08:37:49.306 <-- result #60: textDocument/codeAction: null